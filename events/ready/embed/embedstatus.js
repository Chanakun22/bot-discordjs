const { EmbedBuilder, ChannelType } = require('discord.js');
const config = require('../../../config/config_id_channel.json');

let lastStatusCounts = {
  online: 0,
  dnd: 0,
  idle: 0,
  offline: 0
};

let userStatus = {};
let changedUsers = [];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
function getStatusEmoji(status) {
  switch (status) {
    case 'online': return 'üü¢';
    case 'idle': return 'üåô';
    case 'dnd': return 'üî¥';
    case 'offline': return '‚ö´';
    default: return '‚ùì';
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö promise
function withTimeout(promise, timeout) {
  return Promise.race([
    promise,
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤')), timeout)
    )
  ]);
}

module.exports = async (client) => {
  const channel = await client.channels.cache.get(config.id_embed_status);

  if (!channel) {
    console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á');
    return;
  }

  const messages = await channel.messages.fetch({ limit: 4 });
  await Promise.all(messages.map(message => message.delete()));

  const embed = new EmbedBuilder()
    .setTitle('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå')
    .setColor('Red');

  const message = await channel.send({ embeds: [embed] });
  const guild = client.guilds.cache.get('1169260319823106169');

  if (!guild) {
    console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
    return;
  }

  setInterval(async () => {
    try {
      const members = await withTimeout(guild.members.fetch(), 1000); // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      changedUsers = []; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤

      const statusCounts = {
        total: members.size,
        users: members.filter(m => !m.user.bot).size,
        bots: members.filter(m => m.user.bot).size,
        online: members.filter(m => m.presence?.status === 'online').size,
        dnd: members.filter(m => m.presence?.status === 'dnd').size,
        idle: members.filter(m => m.presence?.status === 'idle').size,
        offline: members.filter(m => !m.presence || m.presence.status === 'offline').size,
        active: 0
      };

      statusCounts.active = members.filter(m => !m.user.bot && ['online', 'dnd', 'idle'].includes(m.presence?.status)).size;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï userStatus ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      members.forEach(member => {
        const username = String(member.user.username);
        const currentStatus = member.presence ? member.presence.status : 'offline';

        if (userStatus[username] !== currentStatus) {
          changedUsers.push({
            username: username,
            oldStatus: userStatus[username] || 'unknown',
            newStatus: currentStatus
          });
        }
        userStatus[username] = currentStatus;
      });
  



      if (Object.keys(lastStatusCounts).some(key => lastStatusCounts[key] !== statusCounts[key])) {
        const now = new Date();
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let statusChangesText = '';
        const maxChangesToShow = 3; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        changedUsers.slice(0, maxChangesToShow).forEach(user => {
          const oldEmoji = getStatusEmoji(user.oldStatus);
          const newEmoji = getStatusEmoji(user.newStatus);
          statusChangesText += `**${user.username}**: ${oldEmoji} ${user.oldStatus} -> ${newEmoji} ${user.newStatus}\n`;
        });
        if (changedUsers.length > maxChangesToShow) {
          statusChangesText += `‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å **${changedUsers.length - maxChangesToShow}** ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á\n`;
        }

        embed.setColor('Random').setFields(
          { name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', value: `üë•  ${statusCounts.total}`, inline: false },
          { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', value: `üßë  ${statusCounts.users}`, inline: false },
          { name: '‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', value: `ü§ñ  ${statusCounts.bots}`, inline: false },
          { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', value: `üü¢  ${statusCounts.online}`, inline: false },
          { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡∏£‡∏ö‡∏Å‡∏ß‡∏ô', value: `üö´  ${statusCounts.dnd}`, inline: false },
          { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà', value: `üåô  ${statusCounts.idle}`, inline: false },
          { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå', value: `‚ö´  ${statusCounts.offline}`, inline: false },
          { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', value: `üì∂  ${statusCounts.active}`, inline: false },
          { name: '‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', value: `#Ô∏è‚É£ ${guild.channels.cache.filter(c => c.type === ChannelType.GuildText).size}`, inline: true },
          { name: '‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á', value: `üîä ${guild.channels.cache.filter(c => c.type === ChannelType.GuildVoice).size}`, inline: true },
          { name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', value: statusChangesText || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', inline: false }
        ).setFooter({ text: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }).setTimestamp();

        await message.edit({ embeds: [embed] });
        lastStatusCounts = statusCounts;
      }
    } catch (error) {
      if (error.message === '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤') {
        console.error('‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
      } else {
        console.error(error);
      }
    }
  }, 3000);
};
